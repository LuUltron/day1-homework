/* Security configuration of the "traffic light" example. */
/* nk.basic._ is required for comparison operations support in policies, like != below */
use nk.basic._

/* Definition of the execute interface. */
execute: kl.core.Execute

/* Import the file with the declaration of basic security policy aliases. */
use nk.base._

/* Declaration of entities. */
use EDL Einit
use EDL kl.core.Core

use EDL traffic_light.ControlSystem
use EDL traffic_light.LightsGPIO
use EDL traffic_light.DiagnosticSystem
/*use EDL traffic_light.CommunicationSystem*/

/* Execution of entities allowed. */
execute {
    grant ()
}

/* Request messages allowed. */
/*
request src=traffic_light.ControlSystem {
    grant ()
}
*/

request src=traffic_light.ControlSystem dst=kl.core.Core {
    grant ()
}
/*
request src=traffic_light.CommunicationSystem 
    dst=traffic_light.ControlSystem 
    endpoint=controls.mode
    method=FMode {
        grant ()
}

request src=traffic_light.ControlSystem 
    dst=traffic_light.CommunicationSystem 
    endpoint=communications.mode 
    method=FMode {
        grant ()
}

request src=traffic_light.DiagnosticSystem 
    dst=traffic_light.ControlSystem
    endpoint=controls.mode 
    method=FMode {
        grant ()
}

request src=traffic_light.ControlSystem 
    dst=traffic_light.DiagnosticSystem
    endpoint=diagnostics.ping
    method=FPing {
        grant ()
}
*/
request src=traffic_light.LightsGPIO 
    dst=traffic_light.DiagnosticSystem 
    endpoint=diagnostics.ping 
    method=FPing {
        grant ()
}

/* Разрешены все комбинации кроме зеленый-зеленый и зеленый-зеленый в комбинации с другими цветами*/
/* Запрещены комбинации зеленый-только желтый и зеленый с красным на любом направлении*/
request src=traffic_light.ControlSystem 
    dst=traffic_light.LightsGPIO 
    endpoint=lightsGpio.mode 
    method=FMode {
        assert ((message.value < 0x404 && message.value != 0x206 && message.value != 0x20e)
        || (message.value >= 0x900 && message.value < 0xc04 && message.value != 0xa06 && message.value != 0xa0e)
        || message.value == 0x601 || message.value == 0x603 || message.value == 0x609 || message.value == 0x60a || message.value == 0x60b
        || message.value == 0xe01 || message.value == 0xe03 || message.value == 0xe09 || message.value == 0xe0a || message.value == 0xe0b)
}


request src=Einit {
    grant ()
}

request src=kl.core.Core {
    grant ()
}

request src=traffic_light.LightsGPIO dst=kl.core.Core {
    grant ()
}


/* Response messages allowed. */

response {
    grant ()
}

/*
response src=traffic_light.LightsGPIO 
    dst=traffic_light.ControlSystem 
    endpoint=lightsGpio.mode 
    method=FMode {
        assert (message.result < 0x1000404)
}
*/

error {
    grant ()
}

/* Calls to the security interface are ignored. */
security {
    grant ()
}
